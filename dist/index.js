var o=class{constructor(){this.worker=new Worker(new URL("./worker.js",import.meta.url),{type:"module"}),this.waitForWorker=!1,this.worker.onmessage=({data:t})=>{if(this.waitForWorker){let{return:r,throw:a}=this.waitForWorker;this.waitForWorker=!1,t?.error?a(t.error):r(t?.out)}}}async runFn(t,...r){let a=new Promise((e,n)=>{this.waitForWorker={error:n,return:e}});return this.worker.postMessage({fn:t,args:r},r.map(e=>{if([ArrayBuffer,Uint8Array,Int8Array,Uint16Array,Int16Array,Uint32Array,Int32Array,Float32Array,Float64Array].some(n=>e instanceof n))return e.buffer}).filter(e=>e)),await a}async open(t,r){return await this.runFn("open",t,r)}async metadata(t){let r=await this.runFn("metadata",!!t);return r?.hasOwnProperty("thumb_format")&&(r.thumb_format=["unknown","jpeg","bitmap","bitmap16","layer","rollei","h265"][r.thumb_format]||"unknown"),r?.hasOwnProperty("desc")&&(r.desc=String(r.desc).trim()),r?.hasOwnProperty("timestamp")&&(r.timestamp=new Date(r.timestamp)),r}async imageData(){return await this.runFn("imageData")}};export{o as default};
//# sourceMappingURL=index.js.map
