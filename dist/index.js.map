{
  "version": 3,
  "sources": ["../index.js"],
  "sourcesContent": ["export default class LibRaw {\n\tconstructor() {\n\t\tthis.worker = new Worker(new URL('./worker.js', import.meta.url), {type:\"module\"});\n\t\tthis.waitForWorker = false;\n\t\tthis.worker.onmessage = ({data}) => {\n\t\t\tif(this.waitForWorker) {\n\t\t\t\tlet {\"return\": ret, \"throw\": thr} = this.waitForWorker;\n\t\t\t\tthis.waitForWorker = false;\n\t\t\t\tif(data?.error) {\n\t\t\t\t\tthr(data.error);\n\t\t\t\t} else {\n\t\t\t\t\tret(data?.out);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\t\n\tasync runFn(fn, ...args) {\n\t\tlet prom = new Promise((res, err)=>{\n\t\t\tthis.waitForWorker = {\n\t\t\t\terror: err,\n\t\t\t\treturn: res,\n\t\t\t};\n\t\t});\n\t\tthis.worker.postMessage({fn, args}, args.map(a=>{\n\t\t\tif([ArrayBuffer, Uint8Array, Int8Array, Uint16Array, Int16Array, Uint32Array, Int32Array, Float32Array, Float64Array].some(b=>a instanceof b)) { // Transfer buffer\n\t\t\t\treturn a.buffer;\n\t\t\t}\n\t\t}).filter(a=>a));\n\t\treturn await prom;\n\t}\n\t/**\n\t * Open/parse the RAW data with optional settings\n\t */\n\tasync open(buffer, settings) {\n\t\treturn await this.runFn('open', buffer, settings);\n\t}\n\n\t/**\n\t * Retrieve metadata\n\t */\n\tasync metadata(fullOutput) {\n\t\tlet metadata = await this.runFn('metadata', !!fullOutput);\n\t\t// Example: convert numeric thumb_format to a string\n\t\tif (metadata?.hasOwnProperty('thumb_format')) {\n\t\t\tmetadata.thumb_format = [\n\t\t\t\t'unknown',\n\t\t\t\t'jpeg',\n\t\t\t\t'bitmap',\n\t\t\t\t'bitmap16',\n\t\t\t\t'layer',\n\t\t\t\t'rollei',\n\t\t\t\t'h265'\n\t\t\t][metadata.thumb_format] || 'unknown';\n\t\t}\n\t\t// Trim desc if present\n\t\tif (metadata?.hasOwnProperty('desc')) {\n\t\t\tmetadata.desc = String(metadata.desc).trim();\n\t\t}\n\t\tif (metadata?.hasOwnProperty('timestamp')) {\n\t\t\tmetadata.timestamp = new Date(metadata.timestamp);\n\t\t}\n\t\treturn metadata;\n\t}\n\n\t/**\n\t * Retrieve processed image data (synchronously from the perspective of C++,\n\t * but we've already awaited the module & instance.)\n\t */\n\tasync imageData() {\n\t\treturn await this.runFn('imageData');\n\t}\n}"],
  "mappings": "AAAA,IAAqBA,EAArB,KAA4B,CAC3B,aAAc,CACb,KAAK,OAAS,IAAI,OAAO,IAAI,IAAI,cAAe,YAAY,GAAG,EAAG,CAAC,KAAK,QAAQ,CAAC,EACjF,KAAK,cAAgB,GACrB,KAAK,OAAO,UAAY,CAAC,CAAC,KAAAC,CAAI,IAAM,CACnC,GAAG,KAAK,cAAe,CACtB,GAAI,CAAC,OAAUC,EAAK,MAASC,CAAG,EAAI,KAAK,cACzC,KAAK,cAAgB,GAClBF,GAAM,MACRE,EAAIF,EAAK,KAAK,EAEdC,EAAID,GAAM,GAAG,CAEf,CACD,CACD,CAEA,MAAM,MAAMG,KAAOC,EAAM,CACxB,IAAIC,EAAO,IAAI,QAAQ,CAACC,EAAKC,IAAM,CAClC,KAAK,cAAgB,CACpB,MAAOA,EACP,OAAQD,CACT,CACD,CAAC,EACD,YAAK,OAAO,YAAY,CAAC,GAAAH,EAAI,KAAAC,CAAI,EAAGA,EAAK,IAAII,GAAG,CAC/C,GAAG,CAAC,YAAa,WAAY,UAAW,YAAa,WAAY,YAAa,WAAY,aAAc,YAAY,EAAE,KAAKC,GAAGD,aAAaC,CAAC,EAC3I,OAAOD,EAAE,MAEX,CAAC,EAAE,OAAOA,GAAGA,CAAC,CAAC,EACR,MAAMH,CACd,CAIA,MAAM,KAAKK,EAAQC,EAAU,CAC5B,OAAO,MAAM,KAAK,MAAM,OAAQD,EAAQC,CAAQ,CACjD,CAKA,MAAM,SAASC,EAAY,CAC1B,IAAIC,EAAW,MAAM,KAAK,MAAM,WAAY,CAAC,CAACD,CAAU,EAExD,OAAIC,GAAU,eAAe,cAAc,IAC1CA,EAAS,aAAe,CACvB,UACA,OACA,SACA,WACA,QACA,SACA,MACD,EAAEA,EAAS,YAAY,GAAK,WAGzBA,GAAU,eAAe,MAAM,IAClCA,EAAS,KAAO,OAAOA,EAAS,IAAI,EAAE,KAAK,GAExCA,GAAU,eAAe,WAAW,IACvCA,EAAS,UAAY,IAAI,KAAKA,EAAS,SAAS,GAE1CA,CACR,CAMA,MAAM,WAAY,CACjB,OAAO,MAAM,KAAK,MAAM,WAAW,CACpC,CACD",
  "names": ["LibRaw", "data", "ret", "thr", "fn", "args", "prom", "res", "err", "a", "b", "buffer", "settings", "fullOutput", "metadata"]
}
